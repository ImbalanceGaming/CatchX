<?php namespace Model;

/* This basic model has been auto-generated by the Gas ORM */

use \Gas\Core;
use \Gas\ORM;

class Games extends ORM {
	
	public $primary_key = 'id';

	function _init()
	{

        self::$relationships = array(
            'gameStates'  => ORM::has_one('\\Model\\GameStates')
        );

		self::$fields = array(
			'id' => ORM::field('auto[11]'),
			'name' => ORM::field('char[40]'),
			'active' => ORM::field('int[1]'),
			'password' => ORM::field('char[255]'),
		);

	}

    public static function getInstance() {
        return new self;
    }

    /**
     * Get active games and return their id and name
     *
     * @return array
     */
    public function getGames() {

        $games = $this->find_by_active(1);

        $names = [];

        foreach ($games as $game) {
            $names[] = array(
                'id' => $game->id,
                'name' => $game->name
            );
        }

        return $names;

    }

    /**
     * Create a new game state in the database
     *
     * @param int $gameId
     * @param int $graphId
     * @param int[] $characterIds Int array of player id's with the first array entry being the criminal
     */
    public function createGameState($gameId, $graphId, $characterIds) {

        $graph = \Model\Graphs::find($graphId);

        $gameState = new \Model\GameStates();
        $gameState->games_id = $gameId;
        $gameState->graphs_id = $graphId;
        $gameState->victory = 'none';
        $gameState->turn = 0;
        $gameState->number_of_turns = 24;
        $gameState->reveal_turns = json_encode([1,6,11,17,23]);
        $gameState->doubles = 2;
        $gameState->hiddens = 3;
        $gameState->players = 5;
        $gameState->log = "";
        $gameState->last_known_joker_position = $graph->no_of_nodes;
        $gameState->turn_side = "good";
        $gameState->save();
        $gameState->id = $gameState::last_created()->id;

        $counter = 1;

        foreach ($characterIds as $characterId) {
            $player = new \Model\Players();
            $defaultSettings = $player::DEFAULT_SETTINGS;

            $player->game_states_id = $gameState->id;
            $player->characters_id = $characterId;

            switch ($counter) {
                case 1:
                    $player->position = $graph->no_of_nodes;
                    $player->turn = $defaultSettings['criminal']['turn'];
                    $player->control = $defaultSettings['criminal']['control'];
                    break;
                case 2:
                    $player->position = $graph->no_of_nodes-4;
                    $player->turn = $defaultSettings['detective1']['turn'];
                    $player->control = $defaultSettings['detective1']['control'];
                    break;
                case 3:
                    $player->position = $graph->no_of_nodes-3;
                    $player->turn = $defaultSettings['detective2']['turn'];
                    $player->control = $defaultSettings['detective2']['control'];
                    break;
                case 4:
                    $player->position = $graph->no_of_nodes-2;
                    $player->turn = $defaultSettings['detective3']['turn'];
                    $player->control = $defaultSettings['detective3']['control'];
                    break;
                case 5:
                    $player->position = $graph->no_of_nodes-1;
                    $player->turn = $defaultSettings['detective4']['turn'];
                    $player->control = $defaultSettings['detective4']['control'];
                    break;
            }

            $player->save();

            $counter++;
        }

    }

}